
PWM_New001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e5c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003040  08003040  00013040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003068  08003068  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003068  08003068  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003068  08003068  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003068  08003068  00013068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800306c  0800306c  0001306c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  0800307c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  0800307c  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a437  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ec  00000000  00000000  0002a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  0002be58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b50  00000000  00000000  0002ca40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bca  00000000  00000000  0002d590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c1b6  00000000  00000000  0004615a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094866  00000000  00000000  00052310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e6b76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d0  00000000  00000000  000e6bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08003028 	.word	0x08003028

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08003028 	.word	0x08003028

08000224 <Forward>:
TIM_HandleTypeDef htim3;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
void Forward(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	// Переднее левое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 8000228:	2201      	movs	r2, #1
 800022a:	2120      	movs	r1, #32
 800022c:	4814      	ldr	r0, [pc, #80]	; (8000280 <Forward+0x5c>)
 800022e:	f001 f871 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000232:	2200      	movs	r2, #0
 8000234:	2110      	movs	r1, #16
 8000236:	4812      	ldr	r0, [pc, #72]	; (8000280 <Forward+0x5c>)
 8000238:	f001 f86c 	bl	8001314 <HAL_GPIO_WritePin>
	// Переднее правое колесо
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,  GPIO_PIN_SET);
 800023c:	2201      	movs	r2, #1
 800023e:	2104      	movs	r1, #4
 8000240:	4810      	ldr	r0, [pc, #64]	; (8000284 <Forward+0x60>)
 8000242:	f001 f867 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000246:	2200      	movs	r2, #0
 8000248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800024c:	480e      	ldr	r0, [pc, #56]	; (8000288 <Forward+0x64>)
 800024e:	f001 f861 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее левое колесо
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 8000252:	2201      	movs	r2, #1
 8000254:	2110      	movs	r1, #16
 8000256:	480c      	ldr	r0, [pc, #48]	; (8000288 <Forward+0x64>)
 8000258:	f001 f85c 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	2120      	movs	r1, #32
 8000260:	4809      	ldr	r0, [pc, #36]	; (8000288 <Forward+0x64>)
 8000262:	f001 f857 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее правое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET);
 8000266:	2201      	movs	r2, #1
 8000268:	2101      	movs	r1, #1
 800026a:	4805      	ldr	r0, [pc, #20]	; (8000280 <Forward+0x5c>)
 800026c:	f001 f852 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  GPIO_PIN_RESET);
 8000270:	2200      	movs	r2, #0
 8000272:	2102      	movs	r1, #2
 8000274:	4802      	ldr	r0, [pc, #8]	; (8000280 <Forward+0x5c>)
 8000276:	f001 f84d 	bl	8001314 <HAL_GPIO_WritePin>
	}
 800027a:	bf00      	nop
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40010c00 	.word	0x40010c00
 8000284:	40011400 	.word	0x40011400
 8000288:	40011000 	.word	0x40011000

0800028c <Back>:

void Back(){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	// Переднее левое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	2120      	movs	r1, #32
 8000294:	4814      	ldr	r0, [pc, #80]	; (80002e8 <Back+0x5c>)
 8000296:	f001 f83d 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2110      	movs	r1, #16
 800029e:	4812      	ldr	r0, [pc, #72]	; (80002e8 <Back+0x5c>)
 80002a0:	f001 f838 	bl	8001314 <HAL_GPIO_WritePin>
	// Переднее правое колесо
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,  GPIO_PIN_RESET);
 80002a4:	2200      	movs	r2, #0
 80002a6:	2104      	movs	r1, #4
 80002a8:	4810      	ldr	r0, [pc, #64]	; (80002ec <Back+0x60>)
 80002aa:	f001 f833 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80002b4:	480e      	ldr	r0, [pc, #56]	; (80002f0 <Back+0x64>)
 80002b6:	f001 f82d 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее левое колесо
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 80002ba:	2200      	movs	r2, #0
 80002bc:	2110      	movs	r1, #16
 80002be:	480c      	ldr	r0, [pc, #48]	; (80002f0 <Back+0x64>)
 80002c0:	f001 f828 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2120      	movs	r1, #32
 80002c8:	4809      	ldr	r0, [pc, #36]	; (80002f0 <Back+0x64>)
 80002ca:	f001 f823 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее правое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2101      	movs	r1, #1
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <Back+0x5c>)
 80002d4:	f001 f81e 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  GPIO_PIN_SET);
 80002d8:	2201      	movs	r2, #1
 80002da:	2102      	movs	r1, #2
 80002dc:	4802      	ldr	r0, [pc, #8]	; (80002e8 <Back+0x5c>)
 80002de:	f001 f819 	bl	8001314 <HAL_GPIO_WritePin>
	}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010c00 	.word	0x40010c00
 80002ec:	40011400 	.word	0x40011400
 80002f0:	40011000 	.word	0x40011000

080002f4 <Left>:

void Left(){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	// Переднее левое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_SET);
 80002f8:	2201      	movs	r2, #1
 80002fa:	2120      	movs	r1, #32
 80002fc:	4814      	ldr	r0, [pc, #80]	; (8000350 <Left+0x5c>)
 80002fe:	f001 f809 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000302:	2200      	movs	r2, #0
 8000304:	2110      	movs	r1, #16
 8000306:	4812      	ldr	r0, [pc, #72]	; (8000350 <Left+0x5c>)
 8000308:	f001 f804 	bl	8001314 <HAL_GPIO_WritePin>
	// Переднее правое колесо
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,  GPIO_PIN_RESET);
 800030c:	2200      	movs	r2, #0
 800030e:	2104      	movs	r1, #4
 8000310:	4810      	ldr	r0, [pc, #64]	; (8000354 <Left+0x60>)
 8000312:	f000 ffff 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800031c:	480e      	ldr	r0, [pc, #56]	; (8000358 <Left+0x64>)
 800031e:	f000 fff9 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее левое колесо
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_RESET);
 8000322:	2200      	movs	r2, #0
 8000324:	2110      	movs	r1, #16
 8000326:	480c      	ldr	r0, [pc, #48]	; (8000358 <Left+0x64>)
 8000328:	f000 fff4 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_SET);
 800032c:	2201      	movs	r2, #1
 800032e:	2120      	movs	r1, #32
 8000330:	4809      	ldr	r0, [pc, #36]	; (8000358 <Left+0x64>)
 8000332:	f000 ffef 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее правое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_SET);
 8000336:	2201      	movs	r2, #1
 8000338:	2101      	movs	r1, #1
 800033a:	4805      	ldr	r0, [pc, #20]	; (8000350 <Left+0x5c>)
 800033c:	f000 ffea 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	2102      	movs	r1, #2
 8000344:	4802      	ldr	r0, [pc, #8]	; (8000350 <Left+0x5c>)
 8000346:	f000 ffe5 	bl	8001314 <HAL_GPIO_WritePin>
	}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40010c00 	.word	0x40010c00
 8000354:	40011400 	.word	0x40011400
 8000358:	40011000 	.word	0x40011000

0800035c <Right>:

void Right(){
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	// Переднее левое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000360:	2200      	movs	r2, #0
 8000362:	2120      	movs	r1, #32
 8000364:	4814      	ldr	r0, [pc, #80]	; (80003b8 <Right+0x5c>)
 8000366:	f000 ffd5 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  GPIO_PIN_SET);
 800036a:	2201      	movs	r2, #1
 800036c:	2110      	movs	r1, #16
 800036e:	4812      	ldr	r0, [pc, #72]	; (80003b8 <Right+0x5c>)
 8000370:	f000 ffd0 	bl	8001314 <HAL_GPIO_WritePin>
	// Переднее правое колесо
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2,  GPIO_PIN_SET);
 8000374:	2201      	movs	r2, #1
 8000376:	2104      	movs	r1, #4
 8000378:	4810      	ldr	r0, [pc, #64]	; (80003bc <Right+0x60>)
 800037a:	f000 ffcb 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 800037e:	2200      	movs	r2, #0
 8000380:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000384:	480e      	ldr	r0, [pc, #56]	; (80003c0 <Right+0x64>)
 8000386:	f000 ffc5 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее левое колесо
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4,  GPIO_PIN_SET);
 800038a:	2201      	movs	r2, #1
 800038c:	2110      	movs	r1, #16
 800038e:	480c      	ldr	r0, [pc, #48]	; (80003c0 <Right+0x64>)
 8000390:	f000 ffc0 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5,  GPIO_PIN_RESET);
 8000394:	2200      	movs	r2, #0
 8000396:	2120      	movs	r1, #32
 8000398:	4809      	ldr	r0, [pc, #36]	; (80003c0 <Right+0x64>)
 800039a:	f000 ffbb 	bl	8001314 <HAL_GPIO_WritePin>
	// Заднее правое колесо
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0,  GPIO_PIN_RESET);
 800039e:	2200      	movs	r2, #0
 80003a0:	2101      	movs	r1, #1
 80003a2:	4805      	ldr	r0, [pc, #20]	; (80003b8 <Right+0x5c>)
 80003a4:	f000 ffb6 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1,  GPIO_PIN_SET);
 80003a8:	2201      	movs	r2, #1
 80003aa:	2102      	movs	r1, #2
 80003ac:	4802      	ldr	r0, [pc, #8]	; (80003b8 <Right+0x5c>)
 80003ae:	f000 ffb1 	bl	8001314 <HAL_GPIO_WritePin>
	}
 80003b2:	bf00      	nop
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010c00 	.word	0x40010c00
 80003bc:	40011400 	.word	0x40011400
 80003c0:	40011000 	.word	0x40011000

080003c4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t str[1] = "0";
 80003ca:	2330      	movs	r3, #48	; 0x30
 80003cc:	713b      	strb	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80003ce:	f000 fb37 	bl	8000a40 <HAL_Init>


	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80003d2:	f000 f831 	bl	8000438 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80003d6:	f000 f937 	bl	8000648 <MX_GPIO_Init>
	MX_TIM3_Init();
 80003da:	f000 f873 	bl	80004c4 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 80003de:	f000 f909 	bl	80005f4 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80003e2:	2100      	movs	r1, #0
 80003e4:	4813      	ldr	r0, [pc, #76]	; (8000434 <main+0x70>)
 80003e6:	f001 fc6f 	bl	8001cc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80003ea:	2104      	movs	r1, #4
 80003ec:	4811      	ldr	r0, [pc, #68]	; (8000434 <main+0x70>)
 80003ee:	f001 fc6b 	bl	8001cc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80003f2:	2108      	movs	r1, #8
 80003f4:	480f      	ldr	r0, [pc, #60]	; (8000434 <main+0x70>)
 80003f6:	f001 fc67 	bl	8001cc8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80003fa:	210c      	movs	r1, #12
 80003fc:	480d      	ldr	r0, [pc, #52]	; (8000434 <main+0x70>)
 80003fe:	f001 fc63 	bl	8001cc8 <HAL_TIM_PWM_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		Forward();
 8000402:	f7ff ff0f 	bl	8000224 <Forward>
		HAL_Delay(3000);
 8000406:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800040a:	f000 fb7b 	bl	8000b04 <HAL_Delay>
		Left();
 800040e:	f7ff ff71 	bl	80002f4 <Left>
		HAL_Delay(3000);
 8000412:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000416:	f000 fb75 	bl	8000b04 <HAL_Delay>
		Back();
 800041a:	f7ff ff37 	bl	800028c <Back>
		HAL_Delay(3000);
 800041e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000422:	f000 fb6f 	bl	8000b04 <HAL_Delay>
		Right();
 8000426:	f7ff ff99 	bl	800035c <Right>
		HAL_Delay(3000);
 800042a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800042e:	f000 fb69 	bl	8000b04 <HAL_Delay>
		Forward();
 8000432:	e7e6      	b.n	8000402 <main+0x3e>
 8000434:	20000028 	.word	0x20000028

08000438 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000438:	b580      	push	{r7, lr}
 800043a:	b090      	sub	sp, #64	; 0x40
 800043c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800043e:	f107 0318 	add.w	r3, r7, #24
 8000442:	2228      	movs	r2, #40	; 0x28
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f002 fde6 	bl	8003018 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800044c:	1d3b      	adds	r3, r7, #4
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
 8000458:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800045a:	2301      	movs	r3, #1
 800045c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800045e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000462:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000464:	2300      	movs	r3, #0
 8000466:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000468:	2301      	movs	r3, #1
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800046c:	2302      	movs	r3, #2
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000470:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000474:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000476:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800047a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800047c:	f107 0318 	add.w	r3, r7, #24
 8000480:	4618      	mov	r0, r3
 8000482:	f000 ff5f 	bl	8001344 <HAL_RCC_OscConfig>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <SystemClock_Config+0x58>
		Error_Handler();
 800048c:	f000 f988 	bl	80007a0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000490:	230f      	movs	r3, #15
 8000492:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000494:	2302      	movs	r3, #2
 8000496:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800049c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004a0:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004a2:	2300      	movs	r3, #0
 80004a4:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2102      	movs	r1, #2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 f9cc 	bl	8001848 <HAL_RCC_ClockConfig>
 80004b0:	4603      	mov	r3, r0
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d001      	beq.n	80004ba <SystemClock_Config+0x82>
		Error_Handler();
 80004b6:	f000 f973 	bl	80007a0 <Error_Handler>
	}
}
 80004ba:	bf00      	nop
 80004bc:	3740      	adds	r7, #64	; 0x40
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b08e      	sub	sp, #56	; 0x38
 80004c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80004ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004d8:	f107 0320 	add.w	r3, r7, #32
 80004dc:	2200      	movs	r2, #0
 80004de:	601a      	str	r2, [r3, #0]
 80004e0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80004e2:	1d3b      	adds	r3, r7, #4
 80004e4:	2200      	movs	r2, #0
 80004e6:	601a      	str	r2, [r3, #0]
 80004e8:	605a      	str	r2, [r3, #4]
 80004ea:	609a      	str	r2, [r3, #8]
 80004ec:	60da      	str	r2, [r3, #12]
 80004ee:	611a      	str	r2, [r3, #16]
 80004f0:	615a      	str	r2, [r3, #20]
 80004f2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80004f4:	4b3d      	ldr	r3, [pc, #244]	; (80005ec <MX_TIM3_Init+0x128>)
 80004f6:	4a3e      	ldr	r2, [pc, #248]	; (80005f0 <MX_TIM3_Init+0x12c>)
 80004f8:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 80004fa:	4b3c      	ldr	r3, [pc, #240]	; (80005ec <MX_TIM3_Init+0x128>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000500:	4b3a      	ldr	r3, [pc, #232]	; (80005ec <MX_TIM3_Init+0x128>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000506:	4b39      	ldr	r3, [pc, #228]	; (80005ec <MX_TIM3_Init+0x128>)
 8000508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800050c:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050e:	4b37      	ldr	r3, [pc, #220]	; (80005ec <MX_TIM3_Init+0x128>)
 8000510:	2200      	movs	r2, #0
 8000512:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000514:	4b35      	ldr	r3, [pc, #212]	; (80005ec <MX_TIM3_Init+0x128>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 800051a:	4834      	ldr	r0, [pc, #208]	; (80005ec <MX_TIM3_Init+0x128>)
 800051c:	f001 fb2c 	bl	8001b78 <HAL_TIM_Base_Init>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_TIM3_Init+0x66>
		Error_Handler();
 8000526:	f000 f93b 	bl	80007a0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800052e:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000534:	4619      	mov	r1, r3
 8000536:	482d      	ldr	r0, [pc, #180]	; (80005ec <MX_TIM3_Init+0x128>)
 8000538:	f001 fd3e 	bl	8001fb8 <HAL_TIM_ConfigClockSource>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM3_Init+0x82>
		Error_Handler();
 8000542:	f000 f92d 	bl	80007a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8000546:	4829      	ldr	r0, [pc, #164]	; (80005ec <MX_TIM3_Init+0x128>)
 8000548:	f001 fb65 	bl	8001c16 <HAL_TIM_PWM_Init>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM3_Init+0x92>
		Error_Handler();
 8000552:	f000 f925 	bl	80007a0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000556:	2300      	movs	r3, #0
 8000558:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800055a:	2300      	movs	r3, #0
 800055c:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 800055e:	f107 0320 	add.w	r3, r7, #32
 8000562:	4619      	mov	r1, r3
 8000564:	4821      	ldr	r0, [pc, #132]	; (80005ec <MX_TIM3_Init+0x128>)
 8000566:	f002 f8cb 	bl	8002700 <HAL_TIMEx_MasterConfigSynchronization>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM3_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8000570:	f000 f916 	bl	80007a0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000574:	2360      	movs	r3, #96	; 0x60
 8000576:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 33000;
 8000578:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800057c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8000586:	1d3b      	adds	r3, r7, #4
 8000588:	2200      	movs	r2, #0
 800058a:	4619      	mov	r1, r3
 800058c:	4817      	ldr	r0, [pc, #92]	; (80005ec <MX_TIM3_Init+0x128>)
 800058e:	f001 fc55 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <MX_TIM3_Init+0xd8>
			!= HAL_OK) {
		Error_Handler();
 8000598:	f000 f902 	bl	80007a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2204      	movs	r2, #4
 80005a0:	4619      	mov	r1, r3
 80005a2:	4812      	ldr	r0, [pc, #72]	; (80005ec <MX_TIM3_Init+0x128>)
 80005a4:	f001 fc4a 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM3_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 80005ae:	f000 f8f7 	bl	80007a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3)
 80005b2:	1d3b      	adds	r3, r7, #4
 80005b4:	2208      	movs	r2, #8
 80005b6:	4619      	mov	r1, r3
 80005b8:	480c      	ldr	r0, [pc, #48]	; (80005ec <MX_TIM3_Init+0x128>)
 80005ba:	f001 fc3f 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_TIM3_Init+0x104>
			!= HAL_OK) {
		Error_Handler();
 80005c4:	f000 f8ec 	bl	80007a0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	220c      	movs	r2, #12
 80005cc:	4619      	mov	r1, r3
 80005ce:	4807      	ldr	r0, [pc, #28]	; (80005ec <MX_TIM3_Init+0x128>)
 80005d0:	f001 fc34 	bl	8001e3c <HAL_TIM_PWM_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM3_Init+0x11a>
			!= HAL_OK) {
		Error_Handler();
 80005da:	f000 f8e1 	bl	80007a0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80005de:	4803      	ldr	r0, [pc, #12]	; (80005ec <MX_TIM3_Init+0x128>)
 80005e0:	f000 f934 	bl	800084c <HAL_TIM_MspPostInit>

}
 80005e4:	bf00      	nop
 80005e6:	3738      	adds	r7, #56	; 0x38
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000028 	.word	0x20000028
 80005f0:	40000400 	.word	0x40000400

080005f4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	; (8000644 <MX_USART1_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80005fe:	4b10      	ldr	r3, [pc, #64]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000600:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000604:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800062a:	4805      	ldr	r0, [pc, #20]	; (8000640 <MX_USART1_UART_Init+0x4c>)
 800062c:	f002 f8d4 	bl	80027d8 <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000636:	f000 f8b3 	bl	80007a0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000070 	.word	0x20000070
 8000644:	40013800 	.word	0x40013800

08000648 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800065c:	4b4c      	ldr	r3, [pc, #304]	; (8000790 <MX_GPIO_Init+0x148>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a4b      	ldr	r2, [pc, #300]	; (8000790 <MX_GPIO_Init+0x148>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b49      	ldr	r3, [pc, #292]	; (8000790 <MX_GPIO_Init+0x148>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000674:	4b46      	ldr	r3, [pc, #280]	; (8000790 <MX_GPIO_Init+0x148>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a45      	ldr	r2, [pc, #276]	; (8000790 <MX_GPIO_Init+0x148>)
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b43      	ldr	r3, [pc, #268]	; (8000790 <MX_GPIO_Init+0x148>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b40      	ldr	r3, [pc, #256]	; (8000790 <MX_GPIO_Init+0x148>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a3f      	ldr	r2, [pc, #252]	; (8000790 <MX_GPIO_Init+0x148>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <MX_GPIO_Init+0x148>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b3a      	ldr	r3, [pc, #232]	; (8000790 <MX_GPIO_Init+0x148>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a39      	ldr	r2, [pc, #228]	; (8000790 <MX_GPIO_Init+0x148>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b37      	ldr	r3, [pc, #220]	; (8000790 <MX_GPIO_Init+0x148>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c2:	4834      	ldr	r0, [pc, #208]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006c4:	f000 fe26 	bl	8001314 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOC, L_AIN1_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	4831      	ldr	r0, [pc, #196]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006ce:	f000 fe21 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, L_AIN2_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2110      	movs	r1, #16
 80006d6:	482f      	ldr	r0, [pc, #188]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006d8:	f000 fe1c 	bl	8001314 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOD, R_AIN1_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2104      	movs	r1, #4
 80006e0:	482d      	ldr	r0, [pc, #180]	; (8000798 <MX_GPIO_Init+0x150>)
 80006e2:	f000 fe17 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, R_AIN2_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006ec:	4829      	ldr	r0, [pc, #164]	; (8000794 <MX_GPIO_Init+0x14c>)
 80006ee:	f000 fe11 	bl	8001314 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, L_BIN1_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2101      	movs	r1, #1
 80006f6:	4829      	ldr	r0, [pc, #164]	; (800079c <MX_GPIO_Init+0x154>)
 80006f8:	f000 fe0c 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, L_BIN2_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2102      	movs	r1, #2
 8000700:	4826      	ldr	r0, [pc, #152]	; (800079c <MX_GPIO_Init+0x154>)
 8000702:	f000 fe07 	bl	8001314 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOB, R_BIN1_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2110      	movs	r1, #16
 800070a:	4824      	ldr	r0, [pc, #144]	; (800079c <MX_GPIO_Init+0x154>)
 800070c:	f000 fe02 	bl	8001314 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, R_BIN2_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	4821      	ldr	r0, [pc, #132]	; (800079c <MX_GPIO_Init+0x154>)
 8000716:	f000 fdfd 	bl	8001314 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */

	/*Configure GPIO pins : LED_Pin L_AIN2_Pin L_AIN1_Pin R_AIN2_Pin */
	GPIO_InitStruct.Pin = LED_Pin | L_AIN2_Pin | L_AIN1_Pin | R_AIN2_Pin;
 800071a:	f243 0330 	movw	r3, #12336	; 0x3030
 800071e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000720:	2301      	movs	r3, #1
 8000722:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000728:	2302      	movs	r3, #2
 800072a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072c:	f107 0310 	add.w	r3, r7, #16
 8000730:	4619      	mov	r1, r3
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_GPIO_Init+0x14c>)
 8000734:	f000 fc5a 	bl	8000fec <HAL_GPIO_Init>

	/*Configure GPIO pin : BUTTON_Pin */
	GPIO_InitStruct.Pin = BUTTON_Pin;
 8000738:	2301      	movs	r3, #1
 800073a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000744:	f107 0310 	add.w	r3, r7, #16
 8000748:	4619      	mov	r1, r3
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0x14c>)
 800074c:	f000 fc4e 	bl	8000fec <HAL_GPIO_Init>

	/*Configure GPIO pins : L_BIN1_Pin L_BIN2_Pin R_BIN1_Pin R_BIN2_Pin */
	GPIO_InitStruct.Pin = L_BIN1_Pin | L_BIN2_Pin | R_BIN1_Pin | R_BIN2_Pin;
 8000750:	2333      	movs	r3, #51	; 0x33
 8000752:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	4619      	mov	r1, r3
 8000766:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_GPIO_Init+0x154>)
 8000768:	f000 fc40 	bl	8000fec <HAL_GPIO_Init>

	/*Configure GPIO pin : R_AIN1_Pin */
	GPIO_InitStruct.Pin = R_AIN1_Pin;
 800076c:	2304      	movs	r3, #4
 800076e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000770:	2301      	movs	r3, #1
 8000772:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000778:	2302      	movs	r3, #2
 800077a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(R_AIN1_GPIO_Port, &GPIO_InitStruct);
 800077c:	f107 0310 	add.w	r3, r7, #16
 8000780:	4619      	mov	r1, r3
 8000782:	4805      	ldr	r0, [pc, #20]	; (8000798 <MX_GPIO_Init+0x150>)
 8000784:	f000 fc32 	bl	8000fec <HAL_GPIO_Init>

}
 8000788:	bf00      	nop
 800078a:	3720      	adds	r7, #32
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	40011000 	.word	0x40011000
 8000798:	40011400 	.word	0x40011400
 800079c:	40010c00 	.word	0x40010c00

080007a0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a4:	b672      	cpsid	i
}
 80007a6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80007a8:	e7fe      	b.n	80007a8 <Error_Handler+0x8>
	...

080007ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b085      	sub	sp, #20
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <HAL_MspInit+0x5c>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a14      	ldr	r2, [pc, #80]	; (8000808 <HAL_MspInit+0x5c>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_MspInit+0x5c>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <HAL_MspInit+0x5c>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a0e      	ldr	r2, [pc, #56]	; (8000808 <HAL_MspInit+0x5c>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b0c      	ldr	r3, [pc, #48]	; (8000808 <HAL_MspInit+0x5c>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007e2:	4b0a      	ldr	r3, [pc, #40]	; (800080c <HAL_MspInit+0x60>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007ee:	60fb      	str	r3, [r7, #12]
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	4a04      	ldr	r2, [pc, #16]	; (800080c <HAL_MspInit+0x60>)
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007fe:	bf00      	nop
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	40021000 	.word	0x40021000
 800080c:	40010000 	.word	0x40010000

08000810 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a09      	ldr	r2, [pc, #36]	; (8000844 <HAL_TIM_Base_MspInit+0x34>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d10b      	bne.n	800083a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000824:	69db      	ldr	r3, [r3, #28]
 8000826:	4a08      	ldr	r2, [pc, #32]	; (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	61d3      	str	r3, [r2, #28]
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <HAL_TIM_Base_MspInit+0x38>)
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800083a:	bf00      	nop
 800083c:	3714      	adds	r7, #20
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr
 8000844:	40000400 	.word	0x40000400
 8000848:	40021000 	.word	0x40021000

0800084c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a19      	ldr	r2, [pc, #100]	; (80008cc <HAL_TIM_MspPostInit+0x80>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d12a      	bne.n	80008c2 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <HAL_TIM_MspPostInit+0x84>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <HAL_TIM_MspPostInit+0x84>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_TIM_MspPostInit+0x84>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0310 	and.w	r3, r3, #16
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    PC9     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000884:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000888:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2302      	movs	r3, #2
 8000890:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 030c 	add.w	r3, r7, #12
 8000896:	4619      	mov	r1, r3
 8000898:	480e      	ldr	r0, [pc, #56]	; (80008d4 <HAL_TIM_MspPostInit+0x88>)
 800089a:	f000 fba7 	bl	8000fec <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800089e:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <HAL_TIM_MspPostInit+0x8c>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	61fb      	str	r3, [r7, #28]
 80008a4:	69fb      	ldr	r3, [r7, #28]
 80008a6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80008aa:	61fb      	str	r3, [r7, #28]
 80008ac:	69fb      	ldr	r3, [r7, #28]
 80008ae:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80008b2:	61fb      	str	r3, [r7, #28]
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80008ba:	61fb      	str	r3, [r7, #28]
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_TIM_MspPostInit+0x8c>)
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008c2:	bf00      	nop
 80008c4:	3720      	adds	r7, #32
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40000400 	.word	0x40000400
 80008d0:	40021000 	.word	0x40021000
 80008d4:	40011000 	.word	0x40011000
 80008d8:	40010000 	.word	0x40010000

080008dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a20      	ldr	r2, [pc, #128]	; (8000978 <HAL_UART_MspInit+0x9c>)
 80008f8:	4293      	cmp	r3, r2
 80008fa:	d139      	bne.n	8000970 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <HAL_UART_MspInit+0xa0>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	4a1e      	ldr	r2, [pc, #120]	; (800097c <HAL_UART_MspInit+0xa0>)
 8000902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000906:	6193      	str	r3, [r2, #24]
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <HAL_UART_MspInit+0xa0>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000914:	4b19      	ldr	r3, [pc, #100]	; (800097c <HAL_UART_MspInit+0xa0>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	4a18      	ldr	r2, [pc, #96]	; (800097c <HAL_UART_MspInit+0xa0>)
 800091a:	f043 0304 	orr.w	r3, r3, #4
 800091e:	6193      	str	r3, [r2, #24]
 8000920:	4b16      	ldr	r3, [pc, #88]	; (800097c <HAL_UART_MspInit+0xa0>)
 8000922:	699b      	ldr	r3, [r3, #24]
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800092c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000930:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2303      	movs	r3, #3
 8000938:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <HAL_UART_MspInit+0xa4>)
 8000942:	f000 fb53 	bl	8000fec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000946:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800094a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	f107 0310 	add.w	r3, r7, #16
 8000958:	4619      	mov	r1, r3
 800095a:	4809      	ldr	r0, [pc, #36]	; (8000980 <HAL_UART_MspInit+0xa4>)
 800095c:	f000 fb46 	bl	8000fec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	2025      	movs	r0, #37	; 0x25
 8000966:	f000 f9c8 	bl	8000cfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800096a:	2025      	movs	r0, #37	; 0x25
 800096c:	f000 f9e1 	bl	8000d32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000970:	bf00      	nop
 8000972:	3720      	adds	r7, #32
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	40013800 	.word	0x40013800
 800097c:	40021000 	.word	0x40021000
 8000980:	40010800 	.word	0x40010800

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 f87f 	bl	8000acc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80009d8:	4802      	ldr	r0, [pc, #8]	; (80009e4 <USART1_IRQHandler+0x10>)
 80009da:	f001 ff4b 	bl	8002874 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000070 	.word	0x20000070

080009e8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr

080009f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f4:	480c      	ldr	r0, [pc, #48]	; (8000a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80009f6:	490d      	ldr	r1, [pc, #52]	; (8000a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80009f8:	4a0d      	ldr	r2, [pc, #52]	; (8000a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80009fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009fc:	e002      	b.n	8000a04 <LoopCopyDataInit>

080009fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a02:	3304      	adds	r3, #4

08000a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a08:	d3f9      	bcc.n	80009fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a0a:	4a0a      	ldr	r2, [pc, #40]	; (8000a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a0c:	4c0a      	ldr	r4, [pc, #40]	; (8000a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a10:	e001      	b.n	8000a16 <LoopFillZerobss>

08000a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a14:	3204      	adds	r2, #4

08000a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a18:	d3fb      	bcc.n	8000a12 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a1a:	f7ff ffe5 	bl	80009e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a1e:	f002 fad7 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a22:	f7ff fccf 	bl	80003c4 <main>
  bx lr
 8000a26:	4770      	bx	lr
  ldr r0, =_sdata
 8000a28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a2c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a30:	08003070 	.word	0x08003070
  ldr r2, =_sbss
 8000a34:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a38:	200000b8 	.word	0x200000b8

08000a3c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a3c:	e7fe      	b.n	8000a3c <ADC1_2_IRQHandler>
	...

08000a40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a44:	4b08      	ldr	r3, [pc, #32]	; (8000a68 <HAL_Init+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a07      	ldr	r2, [pc, #28]	; (8000a68 <HAL_Init+0x28>)
 8000a4a:	f043 0310 	orr.w	r3, r3, #16
 8000a4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a50:	2003      	movs	r0, #3
 8000a52:	f000 f947 	bl	8000ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a56:	200f      	movs	r0, #15
 8000a58:	f000 f808 	bl	8000a6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a5c:	f7ff fea6 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a60:	2300      	movs	r3, #0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40022000 	.word	0x40022000

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x54>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <HAL_InitTick+0x58>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f000 f95f 	bl	8000d4e <HAL_SYSTICK_Config>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00e      	b.n	8000ab8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2b0f      	cmp	r3, #15
 8000a9e:	d80a      	bhi.n	8000ab6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aa8:	f000 f927 	bl	8000cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aac:	4a06      	ldr	r2, [pc, #24]	; (8000ac8 <HAL_InitTick+0x5c>)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e000      	b.n	8000ab8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	3708      	adds	r7, #8
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	20000000 	.word	0x20000000
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000004 	.word	0x20000004

08000acc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_IncTick+0x1c>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	4b05      	ldr	r3, [pc, #20]	; (8000aec <HAL_IncTick+0x20>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	4a03      	ldr	r2, [pc, #12]	; (8000aec <HAL_IncTick+0x20>)
 8000ade:	6013      	str	r3, [r2, #0]
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	200000b4 	.word	0x200000b4

08000af0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b02      	ldr	r3, [pc, #8]	; (8000b00 <HAL_GetTick+0x10>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bc80      	pop	{r7}
 8000afe:	4770      	bx	lr
 8000b00:	200000b4 	.word	0x200000b4

08000b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b0c:	f7ff fff0 	bl	8000af0 <HAL_GetTick>
 8000b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b1c:	d005      	beq.n	8000b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <HAL_Delay+0x44>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	4413      	add	r3, r2
 8000b28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b2a:	bf00      	nop
 8000b2c:	f7ff ffe0 	bl	8000af0 <HAL_GetTick>
 8000b30:	4602      	mov	r2, r0
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	1ad3      	subs	r3, r2, r3
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d8f7      	bhi.n	8000b2c <HAL_Delay+0x28>
  {
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4906      	ldr	r1, [pc, #24]	; (8000be4 <__NVIC_EnableIRQ+0x34>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb0:	d301      	bcc.n	8000cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00f      	b.n	8000cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <SysTick_Config+0x40>)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc4:	f7ff ff90 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <SysTick_Config+0x40>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <SysTick_Config+0x40>)
 8000cd0:	2207      	movs	r2, #7
 8000cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd4:	2300      	movs	r3, #0
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	e000e010 	.word	0xe000e010

08000ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff ff2d 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b086      	sub	sp, #24
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	4603      	mov	r3, r0
 8000d02:	60b9      	str	r1, [r7, #8]
 8000d04:	607a      	str	r2, [r7, #4]
 8000d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0c:	f7ff ff42 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	6978      	ldr	r0, [r7, #20]
 8000d18:	f7ff ff90 	bl	8000c3c <NVIC_EncodePriority>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d22:	4611      	mov	r1, r2
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff5f 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2a:	bf00      	nop
 8000d2c:	3718      	adds	r7, #24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff35 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffa2 	bl	8000ca0 <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d66:	b480      	push	{r7}
 8000d68:	b085      	sub	sp, #20
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d008      	beq.n	8000d8e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e020      	b.n	8000dd0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 020e 	bic.w	r2, r2, #14
 8000d9c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f022 0201 	bic.w	r2, r2, #1
 8000dac:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db6:	2101      	movs	r1, #1
 8000db8:	fa01 f202 	lsl.w	r2, r1, r2
 8000dbc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
	...

08000ddc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d005      	beq.n	8000dfe <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2204      	movs	r2, #4
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
 8000dfc:	e0d6      	b.n	8000fac <HAL_DMA_Abort_IT+0x1d0>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f022 020e 	bic.w	r2, r2, #14
 8000e0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0201 	bic.w	r2, r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	4b64      	ldr	r3, [pc, #400]	; (8000fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d958      	bls.n	8000edc <HAL_DMA_Abort_IT+0x100>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a63      	ldr	r2, [pc, #396]	; (8000fbc <HAL_DMA_Abort_IT+0x1e0>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d04f      	beq.n	8000ed4 <HAL_DMA_Abort_IT+0xf8>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a61      	ldr	r2, [pc, #388]	; (8000fc0 <HAL_DMA_Abort_IT+0x1e4>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d048      	beq.n	8000ed0 <HAL_DMA_Abort_IT+0xf4>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a60      	ldr	r2, [pc, #384]	; (8000fc4 <HAL_DMA_Abort_IT+0x1e8>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d040      	beq.n	8000eca <HAL_DMA_Abort_IT+0xee>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a5e      	ldr	r2, [pc, #376]	; (8000fc8 <HAL_DMA_Abort_IT+0x1ec>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d038      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0xe8>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a5d      	ldr	r2, [pc, #372]	; (8000fcc <HAL_DMA_Abort_IT+0x1f0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d030      	beq.n	8000ebe <HAL_DMA_Abort_IT+0xe2>
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a5b      	ldr	r2, [pc, #364]	; (8000fd0 <HAL_DMA_Abort_IT+0x1f4>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d028      	beq.n	8000eb8 <HAL_DMA_Abort_IT+0xdc>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a53      	ldr	r2, [pc, #332]	; (8000fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d020      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0xd6>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a57      	ldr	r2, [pc, #348]	; (8000fd4 <HAL_DMA_Abort_IT+0x1f8>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d019      	beq.n	8000eae <HAL_DMA_Abort_IT+0xd2>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a56      	ldr	r2, [pc, #344]	; (8000fd8 <HAL_DMA_Abort_IT+0x1fc>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	d012      	beq.n	8000eaa <HAL_DMA_Abort_IT+0xce>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a54      	ldr	r2, [pc, #336]	; (8000fdc <HAL_DMA_Abort_IT+0x200>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d00a      	beq.n	8000ea4 <HAL_DMA_Abort_IT+0xc8>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a53      	ldr	r2, [pc, #332]	; (8000fe0 <HAL_DMA_Abort_IT+0x204>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d102      	bne.n	8000e9e <HAL_DMA_Abort_IT+0xc2>
 8000e98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9c:	e01b      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea2:	e018      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000ea4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ea8:	e015      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000eaa:	2310      	movs	r3, #16
 8000eac:	e013      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e011      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000eb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000eb6:	e00e      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000eb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ebc:	e00b      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000ebe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ec2:	e008      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec8:	e005      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000eca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ece:	e002      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000ed0:	2310      	movs	r3, #16
 8000ed2:	e000      	b.n	8000ed6 <HAL_DMA_Abort_IT+0xfa>
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	4a43      	ldr	r2, [pc, #268]	; (8000fe4 <HAL_DMA_Abort_IT+0x208>)
 8000ed8:	6053      	str	r3, [r2, #4]
 8000eda:	e057      	b.n	8000f8c <HAL_DMA_Abort_IT+0x1b0>
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a36      	ldr	r2, [pc, #216]	; (8000fbc <HAL_DMA_Abort_IT+0x1e0>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d04f      	beq.n	8000f86 <HAL_DMA_Abort_IT+0x1aa>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4a35      	ldr	r2, [pc, #212]	; (8000fc0 <HAL_DMA_Abort_IT+0x1e4>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d048      	beq.n	8000f82 <HAL_DMA_Abort_IT+0x1a6>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a33      	ldr	r2, [pc, #204]	; (8000fc4 <HAL_DMA_Abort_IT+0x1e8>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d040      	beq.n	8000f7c <HAL_DMA_Abort_IT+0x1a0>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a32      	ldr	r2, [pc, #200]	; (8000fc8 <HAL_DMA_Abort_IT+0x1ec>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d038      	beq.n	8000f76 <HAL_DMA_Abort_IT+0x19a>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a30      	ldr	r2, [pc, #192]	; (8000fcc <HAL_DMA_Abort_IT+0x1f0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d030      	beq.n	8000f70 <HAL_DMA_Abort_IT+0x194>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2f      	ldr	r2, [pc, #188]	; (8000fd0 <HAL_DMA_Abort_IT+0x1f4>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d028      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x18e>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a26      	ldr	r2, [pc, #152]	; (8000fb8 <HAL_DMA_Abort_IT+0x1dc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d020      	beq.n	8000f64 <HAL_DMA_Abort_IT+0x188>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a2b      	ldr	r2, [pc, #172]	; (8000fd4 <HAL_DMA_Abort_IT+0x1f8>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d019      	beq.n	8000f60 <HAL_DMA_Abort_IT+0x184>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <HAL_DMA_Abort_IT+0x1fc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d012      	beq.n	8000f5c <HAL_DMA_Abort_IT+0x180>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a28      	ldr	r2, [pc, #160]	; (8000fdc <HAL_DMA_Abort_IT+0x200>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d00a      	beq.n	8000f56 <HAL_DMA_Abort_IT+0x17a>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a26      	ldr	r2, [pc, #152]	; (8000fe0 <HAL_DMA_Abort_IT+0x204>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d102      	bne.n	8000f50 <HAL_DMA_Abort_IT+0x174>
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	e01b      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f54:	e018      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	e015      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	e013      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e011      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f68:	e00e      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f6a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000f6e:	e00b      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f74:	e008      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f7a:	e005      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f80:	e002      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f82:	2310      	movs	r3, #16
 8000f84:	e000      	b.n	8000f88 <HAL_DMA_Abort_IT+0x1ac>
 8000f86:	2301      	movs	r3, #1
 8000f88:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <HAL_DMA_Abort_IT+0x20c>)
 8000f8a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2201      	movs	r2, #1
 8000f90:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d003      	beq.n	8000fac <HAL_DMA_Abort_IT+0x1d0>
    {
      hdma->XferAbortCallback(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	4798      	blx	r3
    } 
  }
  return status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020080 	.word	0x40020080
 8000fbc:	40020008 	.word	0x40020008
 8000fc0:	4002001c 	.word	0x4002001c
 8000fc4:	40020030 	.word	0x40020030
 8000fc8:	40020044 	.word	0x40020044
 8000fcc:	40020058 	.word	0x40020058
 8000fd0:	4002006c 	.word	0x4002006c
 8000fd4:	40020408 	.word	0x40020408
 8000fd8:	4002041c 	.word	0x4002041c
 8000fdc:	40020430 	.word	0x40020430
 8000fe0:	40020444 	.word	0x40020444
 8000fe4:	40020400 	.word	0x40020400
 8000fe8:	40020000 	.word	0x40020000

08000fec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b08b      	sub	sp, #44	; 0x2c
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ffe:	e179      	b.n	80012f4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001000:	2201      	movs	r2, #1
 8001002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	429a      	cmp	r2, r3
 800101a:	f040 8168 	bne.w	80012ee <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	4a96      	ldr	r2, [pc, #600]	; (800127c <HAL_GPIO_Init+0x290>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d05e      	beq.n	80010e6 <HAL_GPIO_Init+0xfa>
 8001028:	4a94      	ldr	r2, [pc, #592]	; (800127c <HAL_GPIO_Init+0x290>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d875      	bhi.n	800111a <HAL_GPIO_Init+0x12e>
 800102e:	4a94      	ldr	r2, [pc, #592]	; (8001280 <HAL_GPIO_Init+0x294>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d058      	beq.n	80010e6 <HAL_GPIO_Init+0xfa>
 8001034:	4a92      	ldr	r2, [pc, #584]	; (8001280 <HAL_GPIO_Init+0x294>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d86f      	bhi.n	800111a <HAL_GPIO_Init+0x12e>
 800103a:	4a92      	ldr	r2, [pc, #584]	; (8001284 <HAL_GPIO_Init+0x298>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d052      	beq.n	80010e6 <HAL_GPIO_Init+0xfa>
 8001040:	4a90      	ldr	r2, [pc, #576]	; (8001284 <HAL_GPIO_Init+0x298>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d869      	bhi.n	800111a <HAL_GPIO_Init+0x12e>
 8001046:	4a90      	ldr	r2, [pc, #576]	; (8001288 <HAL_GPIO_Init+0x29c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d04c      	beq.n	80010e6 <HAL_GPIO_Init+0xfa>
 800104c:	4a8e      	ldr	r2, [pc, #568]	; (8001288 <HAL_GPIO_Init+0x29c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d863      	bhi.n	800111a <HAL_GPIO_Init+0x12e>
 8001052:	4a8e      	ldr	r2, [pc, #568]	; (800128c <HAL_GPIO_Init+0x2a0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d046      	beq.n	80010e6 <HAL_GPIO_Init+0xfa>
 8001058:	4a8c      	ldr	r2, [pc, #560]	; (800128c <HAL_GPIO_Init+0x2a0>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d85d      	bhi.n	800111a <HAL_GPIO_Init+0x12e>
 800105e:	2b12      	cmp	r3, #18
 8001060:	d82a      	bhi.n	80010b8 <HAL_GPIO_Init+0xcc>
 8001062:	2b12      	cmp	r3, #18
 8001064:	d859      	bhi.n	800111a <HAL_GPIO_Init+0x12e>
 8001066:	a201      	add	r2, pc, #4	; (adr r2, 800106c <HAL_GPIO_Init+0x80>)
 8001068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800106c:	080010e7 	.word	0x080010e7
 8001070:	080010c1 	.word	0x080010c1
 8001074:	080010d3 	.word	0x080010d3
 8001078:	08001115 	.word	0x08001115
 800107c:	0800111b 	.word	0x0800111b
 8001080:	0800111b 	.word	0x0800111b
 8001084:	0800111b 	.word	0x0800111b
 8001088:	0800111b 	.word	0x0800111b
 800108c:	0800111b 	.word	0x0800111b
 8001090:	0800111b 	.word	0x0800111b
 8001094:	0800111b 	.word	0x0800111b
 8001098:	0800111b 	.word	0x0800111b
 800109c:	0800111b 	.word	0x0800111b
 80010a0:	0800111b 	.word	0x0800111b
 80010a4:	0800111b 	.word	0x0800111b
 80010a8:	0800111b 	.word	0x0800111b
 80010ac:	0800111b 	.word	0x0800111b
 80010b0:	080010c9 	.word	0x080010c9
 80010b4:	080010dd 	.word	0x080010dd
 80010b8:	4a75      	ldr	r2, [pc, #468]	; (8001290 <HAL_GPIO_Init+0x2a4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010be:	e02c      	b.n	800111a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e029      	b.n	800111c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	3304      	adds	r3, #4
 80010ce:	623b      	str	r3, [r7, #32]
          break;
 80010d0:	e024      	b.n	800111c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	3308      	adds	r3, #8
 80010d8:	623b      	str	r3, [r7, #32]
          break;
 80010da:	e01f      	b.n	800111c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	330c      	adds	r3, #12
 80010e2:	623b      	str	r3, [r7, #32]
          break;
 80010e4:	e01a      	b.n	800111c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d102      	bne.n	80010f4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ee:	2304      	movs	r3, #4
 80010f0:	623b      	str	r3, [r7, #32]
          break;
 80010f2:	e013      	b.n	800111c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d105      	bne.n	8001108 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010fc:	2308      	movs	r3, #8
 80010fe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	611a      	str	r2, [r3, #16]
          break;
 8001106:	e009      	b.n	800111c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001108:	2308      	movs	r3, #8
 800110a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	69fa      	ldr	r2, [r7, #28]
 8001110:	615a      	str	r2, [r3, #20]
          break;
 8001112:	e003      	b.n	800111c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x130>
          break;
 800111a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	2bff      	cmp	r3, #255	; 0xff
 8001120:	d801      	bhi.n	8001126 <HAL_GPIO_Init+0x13a>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	e001      	b.n	800112a <HAL_GPIO_Init+0x13e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	3304      	adds	r3, #4
 800112a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2bff      	cmp	r3, #255	; 0xff
 8001130:	d802      	bhi.n	8001138 <HAL_GPIO_Init+0x14c>
 8001132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	e002      	b.n	800113e <HAL_GPIO_Init+0x152>
 8001138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113a:	3b08      	subs	r3, #8
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	210f      	movs	r1, #15
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	fa01 f303 	lsl.w	r3, r1, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	401a      	ands	r2, r3
 8001150:	6a39      	ldr	r1, [r7, #32]
 8001152:	693b      	ldr	r3, [r7, #16]
 8001154:	fa01 f303 	lsl.w	r3, r1, r3
 8001158:	431a      	orrs	r2, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	f000 80c1 	beq.w	80012ee <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800116c:	4b49      	ldr	r3, [pc, #292]	; (8001294 <HAL_GPIO_Init+0x2a8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	4a48      	ldr	r2, [pc, #288]	; (8001294 <HAL_GPIO_Init+0x2a8>)
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	6193      	str	r3, [r2, #24]
 8001178:	4b46      	ldr	r3, [pc, #280]	; (8001294 <HAL_GPIO_Init+0x2a8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
 8001182:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001184:	4a44      	ldr	r2, [pc, #272]	; (8001298 <HAL_GPIO_Init+0x2ac>)
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	089b      	lsrs	r3, r3, #2
 800118a:	3302      	adds	r3, #2
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	68fa      	ldr	r2, [r7, #12]
 80011a4:	4013      	ands	r3, r2
 80011a6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a3c      	ldr	r2, [pc, #240]	; (800129c <HAL_GPIO_Init+0x2b0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d01f      	beq.n	80011f0 <HAL_GPIO_Init+0x204>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a3b      	ldr	r2, [pc, #236]	; (80012a0 <HAL_GPIO_Init+0x2b4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d019      	beq.n	80011ec <HAL_GPIO_Init+0x200>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a3a      	ldr	r2, [pc, #232]	; (80012a4 <HAL_GPIO_Init+0x2b8>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d013      	beq.n	80011e8 <HAL_GPIO_Init+0x1fc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a39      	ldr	r2, [pc, #228]	; (80012a8 <HAL_GPIO_Init+0x2bc>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d00d      	beq.n	80011e4 <HAL_GPIO_Init+0x1f8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a38      	ldr	r2, [pc, #224]	; (80012ac <HAL_GPIO_Init+0x2c0>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_Init+0x1f4>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a37      	ldr	r2, [pc, #220]	; (80012b0 <HAL_GPIO_Init+0x2c4>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d101      	bne.n	80011dc <HAL_GPIO_Init+0x1f0>
 80011d8:	2305      	movs	r3, #5
 80011da:	e00a      	b.n	80011f2 <HAL_GPIO_Init+0x206>
 80011dc:	2306      	movs	r3, #6
 80011de:	e008      	b.n	80011f2 <HAL_GPIO_Init+0x206>
 80011e0:	2304      	movs	r3, #4
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x206>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x206>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x206>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x206>
 80011f0:	2300      	movs	r3, #0
 80011f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	68fa      	ldr	r2, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001202:	4925      	ldr	r1, [pc, #148]	; (8001298 <HAL_GPIO_Init+0x2ac>)
 8001204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	68fa      	ldr	r2, [r7, #12]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	4924      	ldr	r1, [pc, #144]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800122a:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	43db      	mvns	r3, r3
 8001232:	4920      	ldr	r1, [pc, #128]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 8001234:	4013      	ands	r3, r2
 8001236:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001240:	2b00      	cmp	r3, #0
 8001242:	d006      	beq.n	8001252 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	491a      	ldr	r1, [pc, #104]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	4313      	orrs	r3, r2
 800124e:	604b      	str	r3, [r1, #4]
 8001250:	e006      	b.n	8001260 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 8001254:	685a      	ldr	r2, [r3, #4]
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	43db      	mvns	r3, r3
 800125a:	4916      	ldr	r1, [pc, #88]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 800125c:	4013      	ands	r3, r2
 800125e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001268:	2b00      	cmp	r3, #0
 800126a:	d025      	beq.n	80012b8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	4910      	ldr	r1, [pc, #64]	; (80012b4 <HAL_GPIO_Init+0x2c8>)
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
 8001278:	e025      	b.n	80012c6 <HAL_GPIO_Init+0x2da>
 800127a:	bf00      	nop
 800127c:	10320000 	.word	0x10320000
 8001280:	10310000 	.word	0x10310000
 8001284:	10220000 	.word	0x10220000
 8001288:	10210000 	.word	0x10210000
 800128c:	10120000 	.word	0x10120000
 8001290:	10110000 	.word	0x10110000
 8001294:	40021000 	.word	0x40021000
 8001298:	40010000 	.word	0x40010000
 800129c:	40010800 	.word	0x40010800
 80012a0:	40010c00 	.word	0x40010c00
 80012a4:	40011000 	.word	0x40011000
 80012a8:	40011400 	.word	0x40011400
 80012ac:	40011800 	.word	0x40011800
 80012b0:	40011c00 	.word	0x40011c00
 80012b4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	43db      	mvns	r3, r3
 80012c0:	4913      	ldr	r1, [pc, #76]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d006      	beq.n	80012e0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012d2:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012d4:	68da      	ldr	r2, [r3, #12]
 80012d6:	490e      	ldr	r1, [pc, #56]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	4313      	orrs	r3, r2
 80012dc:	60cb      	str	r3, [r1, #12]
 80012de:	e006      	b.n	80012ee <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4909      	ldr	r1, [pc, #36]	; (8001310 <HAL_GPIO_Init+0x324>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f0:	3301      	adds	r3, #1
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fa:	fa22 f303 	lsr.w	r3, r2, r3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	f47f ae7e 	bne.w	8001000 <HAL_GPIO_Init+0x14>
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	372c      	adds	r7, #44	; 0x2c
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40010400 	.word	0x40010400

08001314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	807b      	strh	r3, [r7, #2]
 8001320:	4613      	mov	r3, r2
 8001322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001324:	787b      	ldrb	r3, [r7, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d003      	beq.n	8001332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001330:	e003      	b.n	800133a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001332:	887b      	ldrh	r3, [r7, #2]
 8001334:	041a      	lsls	r2, r3, #16
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	611a      	str	r2, [r3, #16]
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	bc80      	pop	{r7}
 8001342:	4770      	bx	lr

08001344 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e272      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 8087 	beq.w	8001472 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001364:	4b92      	ldr	r3, [pc, #584]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 030c 	and.w	r3, r3, #12
 800136c:	2b04      	cmp	r3, #4
 800136e:	d00c      	beq.n	800138a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001370:	4b8f      	ldr	r3, [pc, #572]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 030c 	and.w	r3, r3, #12
 8001378:	2b08      	cmp	r3, #8
 800137a:	d112      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5e>
 800137c:	4b8c      	ldr	r3, [pc, #560]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001388:	d10b      	bne.n	80013a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138a:	4b89      	ldr	r3, [pc, #548]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d06c      	beq.n	8001470 <HAL_RCC_OscConfig+0x12c>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d168      	bne.n	8001470 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e24c      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013aa:	d106      	bne.n	80013ba <HAL_RCC_OscConfig+0x76>
 80013ac:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b6:	6013      	str	r3, [r2, #0]
 80013b8:	e02e      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x98>
 80013c2:	4b7b      	ldr	r3, [pc, #492]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a7a      	ldr	r2, [pc, #488]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b78      	ldr	r3, [pc, #480]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a77      	ldr	r2, [pc, #476]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0xbc>
 80013e6:	4b72      	ldr	r3, [pc, #456]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a71      	ldr	r2, [pc, #452]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xd4>
 8001400:	4b6b      	ldr	r3, [pc, #428]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a6a      	ldr	r2, [pc, #424]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a67      	ldr	r2, [pc, #412]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001420:	f7ff fb66 	bl	8000af0 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fb62 	bl	8000af0 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e200      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143a:	4b5d      	ldr	r3, [pc, #372]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xe4>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001448:	f7ff fb52 	bl	8000af0 <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fb4e 	bl	8000af0 <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e1ec      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0x10c>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d063      	beq.n	8001546 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800147e:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00b      	beq.n	80014a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f003 030c 	and.w	r3, r3, #12
 8001492:	2b08      	cmp	r3, #8
 8001494:	d11c      	bne.n	80014d0 <HAL_RCC_OscConfig+0x18c>
 8001496:	4b46      	ldr	r3, [pc, #280]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d116      	bne.n	80014d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014a2:	4b43      	ldr	r3, [pc, #268]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d005      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d001      	beq.n	80014ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e1c0      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014ba:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4939      	ldr	r1, [pc, #228]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	e03a      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	691b      	ldr	r3, [r3, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014d8:	4b36      	ldr	r3, [pc, #216]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 80014da:	2201      	movs	r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014de:	f7ff fb07 	bl	8000af0 <HAL_GetTick>
 80014e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	e008      	b.n	80014f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014e6:	f7ff fb03 	bl	8000af0 <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	1ad3      	subs	r3, r2, r3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d901      	bls.n	80014f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	e1a1      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0f0      	beq.n	80014e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001504:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	695b      	ldr	r3, [r3, #20]
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	4927      	ldr	r1, [pc, #156]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]
 8001518:	e015      	b.n	8001546 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800151a:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <HAL_RCC_OscConfig+0x270>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001520:	f7ff fae6 	bl	8000af0 <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	e008      	b.n	800153a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001528:	f7ff fae2 	bl	8000af0 <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d901      	bls.n	800153a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001536:	2303      	movs	r3, #3
 8001538:	e180      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d1f0      	bne.n	8001528 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d03a      	beq.n	80015c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d019      	beq.n	800158e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 800155c:	2201      	movs	r2, #1
 800155e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff fac6 	bl	8000af0 <HAL_GetTick>
 8001564:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	e008      	b.n	800157a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001568:	f7ff fac2 	bl	8000af0 <HAL_GetTick>
 800156c:	4602      	mov	r2, r0
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	2b02      	cmp	r3, #2
 8001574:	d901      	bls.n	800157a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e160      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <HAL_RCC_OscConfig+0x26c>)
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f0      	beq.n	8001568 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001586:	2001      	movs	r0, #1
 8001588:	f000 fad8 	bl	8001b3c <RCC_Delay>
 800158c:	e01c      	b.n	80015c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_RCC_OscConfig+0x274>)
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001594:	f7ff faac 	bl	8000af0 <HAL_GetTick>
 8001598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159a:	e00f      	b.n	80015bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800159c:	f7ff faa8 	bl	8000af0 <HAL_GetTick>
 80015a0:	4602      	mov	r2, r0
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d908      	bls.n	80015bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015aa:	2303      	movs	r3, #3
 80015ac:	e146      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	42420000 	.word	0x42420000
 80015b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015bc:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d1e9      	bne.n	800159c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 80a6 	beq.w	8001722 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015da:	4b8b      	ldr	r3, [pc, #556]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10d      	bne.n	8001602 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	4a87      	ldr	r2, [pc, #540]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	61d3      	str	r3, [r2, #28]
 80015f2:	4b85      	ldr	r3, [pc, #532]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80015f4:	69db      	ldr	r3, [r3, #28]
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	60bb      	str	r3, [r7, #8]
 80015fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001602:	4b82      	ldr	r3, [pc, #520]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160a:	2b00      	cmp	r3, #0
 800160c:	d118      	bne.n	8001640 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800160e:	4b7f      	ldr	r3, [pc, #508]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a7e      	ldr	r2, [pc, #504]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001614:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001618:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800161a:	f7ff fa69 	bl	8000af0 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001622:	f7ff fa65 	bl	8000af0 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b64      	cmp	r3, #100	; 0x64
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e103      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001634:	4b75      	ldr	r3, [pc, #468]	; (800180c <HAL_RCC_OscConfig+0x4c8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0f0      	beq.n	8001622 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d106      	bne.n	8001656 <HAL_RCC_OscConfig+0x312>
 8001648:	4b6f      	ldr	r3, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a6e      	ldr	r2, [pc, #440]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	e02d      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d10c      	bne.n	8001678 <HAL_RCC_OscConfig+0x334>
 800165e:	4b6a      	ldr	r3, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a69      	ldr	r2, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001664:	f023 0301 	bic.w	r3, r3, #1
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b67      	ldr	r3, [pc, #412]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	4a66      	ldr	r2, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f023 0304 	bic.w	r3, r3, #4
 8001674:	6213      	str	r3, [r2, #32]
 8001676:	e01c      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	2b05      	cmp	r3, #5
 800167e:	d10c      	bne.n	800169a <HAL_RCC_OscConfig+0x356>
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4a60      	ldr	r2, [pc, #384]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	6213      	str	r3, [r2, #32]
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800168e:	6a1b      	ldr	r3, [r3, #32]
 8001690:	4a5d      	ldr	r2, [pc, #372]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6213      	str	r3, [r2, #32]
 8001698:	e00b      	b.n	80016b2 <HAL_RCC_OscConfig+0x36e>
 800169a:	4b5b      	ldr	r3, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	6a1b      	ldr	r3, [r3, #32]
 800169e:	4a5a      	ldr	r2, [pc, #360]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	f023 0301 	bic.w	r3, r3, #1
 80016a4:	6213      	str	r3, [r2, #32]
 80016a6:	4b58      	ldr	r3, [pc, #352]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4a57      	ldr	r2, [pc, #348]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016ac:	f023 0304 	bic.w	r3, r3, #4
 80016b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d015      	beq.n	80016e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ba:	f7ff fa19 	bl	8000af0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c0:	e00a      	b.n	80016d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f7ff fa15 	bl	8000af0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e0b1      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016d8:	4b4b      	ldr	r3, [pc, #300]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d0ee      	beq.n	80016c2 <HAL_RCC_OscConfig+0x37e>
 80016e4:	e014      	b.n	8001710 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fa03 	bl	8000af0 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff f9ff 	bl	8000af0 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e09b      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001704:	4b40      	ldr	r3, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1ee      	bne.n	80016ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d105      	bne.n	8001722 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001716:	4b3c      	ldr	r3, [pc, #240]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	4a3b      	ldr	r2, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800171c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001720:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	2b00      	cmp	r3, #0
 8001728:	f000 8087 	beq.w	800183a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f003 030c 	and.w	r3, r3, #12
 8001734:	2b08      	cmp	r3, #8
 8001736:	d061      	beq.n	80017fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d146      	bne.n	80017ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b33      	ldr	r3, [pc, #204]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001746:	f7ff f9d3 	bl	8000af0 <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174e:	f7ff f9cf 	bl	8000af0 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b02      	cmp	r3, #2
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e06d      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d1f0      	bne.n	800174e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001774:	d108      	bne.n	8001788 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001776:	4b24      	ldr	r3, [pc, #144]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	4921      	ldr	r1, [pc, #132]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 8001784:	4313      	orrs	r3, r2
 8001786:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001788:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a19      	ldr	r1, [r3, #32]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	430b      	orrs	r3, r1
 800179a:	491b      	ldr	r1, [pc, #108]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 80017a2:	2201      	movs	r2, #1
 80017a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a6:	f7ff f9a3 	bl	8000af0 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f99f 	bl	8000af0 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e03d      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017c0:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d0f0      	beq.n	80017ae <HAL_RCC_OscConfig+0x46a>
 80017cc:	e035      	b.n	800183a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <HAL_RCC_OscConfig+0x4cc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d4:	f7ff f98c 	bl	8000af0 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017dc:	f7ff f988 	bl	8000af0 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e026      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x4c4>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x498>
 80017fa:	e01e      	b.n	800183a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	69db      	ldr	r3, [r3, #28]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d107      	bne.n	8001814 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e019      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
 8001808:	40021000 	.word	0x40021000
 800180c:	40007000 	.word	0x40007000
 8001810:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001814:	4b0b      	ldr	r3, [pc, #44]	; (8001844 <HAL_RCC_OscConfig+0x500>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a1b      	ldr	r3, [r3, #32]
 8001824:	429a      	cmp	r2, r3
 8001826:	d106      	bne.n	8001836 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001832:	429a      	cmp	r2, r3
 8001834:	d001      	beq.n	800183a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40021000 	.word	0x40021000

08001848 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0d0      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b6a      	ldr	r3, [pc, #424]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d910      	bls.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b67      	ldr	r3, [pc, #412]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 0207 	bic.w	r2, r3, #7
 8001872:	4965      	ldr	r1, [pc, #404]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b63      	ldr	r3, [pc, #396]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e0b8      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0302 	and.w	r3, r3, #2
 8001894:	2b00      	cmp	r3, #0
 8001896:	d020      	beq.n	80018da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0304 	and.w	r3, r3, #4
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d005      	beq.n	80018b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	4a58      	ldr	r2, [pc, #352]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018bc:	4b53      	ldr	r3, [pc, #332]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a52      	ldr	r2, [pc, #328]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c8:	4b50      	ldr	r3, [pc, #320]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	494d      	ldr	r1, [pc, #308]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	4313      	orrs	r3, r2
 80018d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d040      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d107      	bne.n	80018fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ee:	4b47      	ldr	r3, [pc, #284]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d115      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e07f      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b02      	cmp	r3, #2
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b41      	ldr	r3, [pc, #260]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e073      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3d      	ldr	r3, [pc, #244]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e06b      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b39      	ldr	r3, [pc, #228]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4936      	ldr	r1, [pc, #216]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	4313      	orrs	r3, r2
 8001936:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f8da 	bl	8000af0 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff f8d6 	bl	8000af0 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	; 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e053      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2d      	ldr	r3, [pc, #180]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d210      	bcs.n	8001998 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b24      	ldr	r3, [pc, #144]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f023 0207 	bic.w	r2, r3, #7
 800197e:	4922      	ldr	r1, [pc, #136]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	4313      	orrs	r3, r2
 8001984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001986:	4b20      	ldr	r3, [pc, #128]	; (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	683a      	ldr	r2, [r7, #0]
 8001990:	429a      	cmp	r2, r3
 8001992:	d001      	beq.n	8001998 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e032      	b.n	80019fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a4:	4b19      	ldr	r3, [pc, #100]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	68db      	ldr	r3, [r3, #12]
 80019b0:	4916      	ldr	r1, [pc, #88]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019c2:	4b12      	ldr	r3, [pc, #72]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	691b      	ldr	r3, [r3, #16]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	490e      	ldr	r1, [pc, #56]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019d6:	f000 f821 	bl	8001a1c <HAL_RCC_GetSysClockFreq>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 030f 	and.w	r3, r3, #15
 80019e6:	490a      	ldr	r1, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	5ccb      	ldrb	r3, [r1, r3]
 80019ea:	fa22 f303 	lsr.w	r3, r2, r3
 80019ee:	4a09      	ldr	r2, [pc, #36]	; (8001a14 <HAL_RCC_ClockConfig+0x1cc>)
 80019f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019f2:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1d0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7ff f838 	bl	8000a6c <HAL_InitTick>

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	08003050 	.word	0x08003050
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000004 	.word	0x20000004

08001a1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a1c:	b490      	push	{r4, r7}
 8001a1e:	b08a      	sub	sp, #40	; 0x28
 8001a20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001a22:	4b29      	ldr	r3, [pc, #164]	; (8001ac8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a24:	1d3c      	adds	r4, r7, #4
 8001a26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001a2c:	f240 2301 	movw	r3, #513	; 0x201
 8001a30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	61fb      	str	r3, [r7, #28]
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3e:	2300      	movs	r3, #0
 8001a40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b04      	cmp	r3, #4
 8001a54:	d002      	beq.n	8001a5c <HAL_RCC_GetSysClockFreq+0x40>
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d003      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x46>
 8001a5a:	e02b      	b.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a5e:	623b      	str	r3, [r7, #32]
      break;
 8001a60:	e02b      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	3328      	adds	r3, #40	; 0x28
 8001a6c:	443b      	add	r3, r7
 8001a6e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001a72:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d012      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a7e:	4b13      	ldr	r3, [pc, #76]	; (8001acc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	0c5b      	lsrs	r3, r3, #17
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	3328      	adds	r3, #40	; 0x28
 8001a8a:	443b      	add	r3, r7
 8001a8c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001a90:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001a96:	fb03 f202 	mul.w	r2, r3, r2
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa0:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa2:	e004      	b.n	8001aae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa8:	fb02 f303 	mul.w	r3, r2, r3
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	623b      	str	r3, [r7, #32]
      break;
 8001ab2:	e002      	b.n	8001aba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ab6:	623b      	str	r3, [r7, #32]
      break;
 8001ab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aba:	6a3b      	ldr	r3, [r7, #32]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bc90      	pop	{r4, r7}
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	08003040 	.word	0x08003040
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	007a1200 	.word	0x007a1200
 8001ad4:	003d0900 	.word	0x003d0900

08001ad8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001adc:	4b02      	ldr	r3, [pc, #8]	; (8001ae8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ade:	681b      	ldr	r3, [r3, #0]
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	20000000 	.word	0x20000000

08001aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001af0:	f7ff fff2 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	0a1b      	lsrs	r3, r3, #8
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	4903      	ldr	r1, [pc, #12]	; (8001b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b02:	5ccb      	ldrb	r3, [r1, r3]
 8001b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08003060 	.word	0x08003060

08001b14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b18:	f7ff ffde 	bl	8001ad8 <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	0adb      	lsrs	r3, r3, #11
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	; (8001b38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003060 	.word	0x08003060

08001b3c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b44:	4b0a      	ldr	r3, [pc, #40]	; (8001b70 <RCC_Delay+0x34>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0a      	ldr	r2, [pc, #40]	; (8001b74 <RCC_Delay+0x38>)
 8001b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4e:	0a5b      	lsrs	r3, r3, #9
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	fb02 f303 	mul.w	r3, r2, r3
 8001b56:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b58:	bf00      	nop
  }
  while (Delay --);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	1e5a      	subs	r2, r3, #1
 8001b5e:	60fa      	str	r2, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1f9      	bne.n	8001b58 <RCC_Delay+0x1c>
}
 8001b64:	bf00      	nop
 8001b66:	bf00      	nop
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr
 8001b70:	20000000 	.word	0x20000000
 8001b74:	10624dd3 	.word	0x10624dd3

08001b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e041      	b.n	8001c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d106      	bne.n	8001ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7fe fe36 	bl	8000810 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2202      	movs	r2, #2
 8001ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3304      	adds	r3, #4
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	f000 fac2 	bl	8002140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b082      	sub	sp, #8
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e041      	b.n	8001cac <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f000 f839 	bl	8001cb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2202      	movs	r2, #2
 8001c46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3304      	adds	r3, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4610      	mov	r0, r2
 8001c56:	f000 fa73 	bl	8002140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2201      	movs	r2, #1
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2201      	movs	r2, #1
 8001c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bc80      	pop	{r7}
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_TIM_PWM_Start+0x24>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	bf14      	ite	ne
 8001ce4:	2301      	movne	r3, #1
 8001ce6:	2300      	moveq	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e022      	b.n	8001d32 <HAL_TIM_PWM_Start+0x6a>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d109      	bne.n	8001d06 <HAL_TIM_PWM_Start+0x3e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	bf14      	ite	ne
 8001cfe:	2301      	movne	r3, #1
 8001d00:	2300      	moveq	r3, #0
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	e015      	b.n	8001d32 <HAL_TIM_PWM_Start+0x6a>
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	2b08      	cmp	r3, #8
 8001d0a:	d109      	bne.n	8001d20 <HAL_TIM_PWM_Start+0x58>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	bf14      	ite	ne
 8001d18:	2301      	movne	r3, #1
 8001d1a:	2300      	moveq	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e008      	b.n	8001d32 <HAL_TIM_PWM_Start+0x6a>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	bf14      	ite	ne
 8001d2c:	2301      	movne	r3, #1
 8001d2e:	2300      	moveq	r3, #0
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e072      	b.n	8001e20 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d104      	bne.n	8001d4a <HAL_TIM_PWM_Start+0x82>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d48:	e013      	b.n	8001d72 <HAL_TIM_PWM_Start+0xaa>
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d104      	bne.n	8001d5a <HAL_TIM_PWM_Start+0x92>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d58:	e00b      	b.n	8001d72 <HAL_TIM_PWM_Start+0xaa>
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d104      	bne.n	8001d6a <HAL_TIM_PWM_Start+0xa2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d68:	e003      	b.n	8001d72 <HAL_TIM_PWM_Start+0xaa>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2201      	movs	r2, #1
 8001d78:	6839      	ldr	r1, [r7, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 fc9c 	bl	80026b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_TIM_PWM_Start+0x160>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_TIM_PWM_Start+0xcc>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_TIM_PWM_Start+0x164>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d101      	bne.n	8001d98 <HAL_TIM_PWM_Start+0xd0>
 8001d94:	2301      	movs	r3, #1
 8001d96:	e000      	b.n	8001d9a <HAL_TIM_PWM_Start+0xd2>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_TIM_PWM_Start+0x160>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d018      	beq.n	8001dea <HAL_TIM_PWM_Start+0x122>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1b      	ldr	r2, [pc, #108]	; (8001e2c <HAL_TIM_PWM_Start+0x164>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_TIM_PWM_Start+0x122>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dca:	d00e      	beq.n	8001dea <HAL_TIM_PWM_Start+0x122>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	; (8001e30 <HAL_TIM_PWM_Start+0x168>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d009      	beq.n	8001dea <HAL_TIM_PWM_Start+0x122>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a16      	ldr	r2, [pc, #88]	; (8001e34 <HAL_TIM_PWM_Start+0x16c>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d004      	beq.n	8001dea <HAL_TIM_PWM_Start+0x122>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_TIM_PWM_Start+0x170>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d111      	bne.n	8001e0e <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2b06      	cmp	r3, #6
 8001dfa:	d010      	beq.n	8001e1e <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0201 	orr.w	r2, r2, #1
 8001e0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e0c:	e007      	b.n	8001e1e <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0201 	orr.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40012c00 	.word	0x40012c00
 8001e2c:	40013400 	.word	0x40013400
 8001e30:	40000400 	.word	0x40000400
 8001e34:	40000800 	.word	0x40000800
 8001e38:	40000c00 	.word	0x40000c00

08001e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d101      	bne.n	8001e56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8001e52:	2302      	movs	r3, #2
 8001e54:	e0ac      	b.n	8001fb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b0c      	cmp	r3, #12
 8001e62:	f200 809f 	bhi.w	8001fa4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8001e66:	a201      	add	r2, pc, #4	; (adr r2, 8001e6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8001e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6c:	08001ea1 	.word	0x08001ea1
 8001e70:	08001fa5 	.word	0x08001fa5
 8001e74:	08001fa5 	.word	0x08001fa5
 8001e78:	08001fa5 	.word	0x08001fa5
 8001e7c:	08001ee1 	.word	0x08001ee1
 8001e80:	08001fa5 	.word	0x08001fa5
 8001e84:	08001fa5 	.word	0x08001fa5
 8001e88:	08001fa5 	.word	0x08001fa5
 8001e8c:	08001f23 	.word	0x08001f23
 8001e90:	08001fa5 	.word	0x08001fa5
 8001e94:	08001fa5 	.word	0x08001fa5
 8001e98:	08001fa5 	.word	0x08001fa5
 8001e9c:	08001f63 	.word	0x08001f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68b9      	ldr	r1, [r7, #8]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f9c4 	bl	8002234 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	699a      	ldr	r2, [r3, #24]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 0208 	orr.w	r2, r2, #8
 8001eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6999      	ldr	r1, [r3, #24]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	430a      	orrs	r2, r1
 8001edc:	619a      	str	r2, [r3, #24]
      break;
 8001ede:	e062      	b.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68b9      	ldr	r1, [r7, #8]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 fa14 	bl	8002314 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699a      	ldr	r2, [r3, #24]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6999      	ldr	r1, [r3, #24]
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	021a      	lsls	r2, r3, #8
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	619a      	str	r2, [r3, #24]
      break;
 8001f20:	e041      	b.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68b9      	ldr	r1, [r7, #8]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f000 fa67 	bl	80023fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	69da      	ldr	r2, [r3, #28]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f042 0208 	orr.w	r2, r2, #8
 8001f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0204 	bic.w	r2, r2, #4
 8001f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	69d9      	ldr	r1, [r3, #28]
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]
      break;
 8001f60:	e021      	b.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f000 fabb 	bl	80024e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	69da      	ldr	r2, [r3, #28]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	69da      	ldr	r2, [r3, #28]
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69d9      	ldr	r1, [r3, #28]
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	021a      	lsls	r2, r3, #8
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	61da      	str	r2, [r3, #28]
      break;
 8001fa2:	e000      	b.n	8001fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8001fa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_TIM_ConfigClockSource+0x18>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e0b3      	b.n	8002138 <HAL_TIM_ConfigClockSource+0x180>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ff6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002008:	d03e      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0xd0>
 800200a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800200e:	f200 8087 	bhi.w	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002016:	f000 8085 	beq.w	8002124 <HAL_TIM_ConfigClockSource+0x16c>
 800201a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201e:	d87f      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002020:	2b70      	cmp	r3, #112	; 0x70
 8002022:	d01a      	beq.n	800205a <HAL_TIM_ConfigClockSource+0xa2>
 8002024:	2b70      	cmp	r3, #112	; 0x70
 8002026:	d87b      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002028:	2b60      	cmp	r3, #96	; 0x60
 800202a:	d050      	beq.n	80020ce <HAL_TIM_ConfigClockSource+0x116>
 800202c:	2b60      	cmp	r3, #96	; 0x60
 800202e:	d877      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002030:	2b50      	cmp	r3, #80	; 0x50
 8002032:	d03c      	beq.n	80020ae <HAL_TIM_ConfigClockSource+0xf6>
 8002034:	2b50      	cmp	r3, #80	; 0x50
 8002036:	d873      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002038:	2b40      	cmp	r3, #64	; 0x40
 800203a:	d058      	beq.n	80020ee <HAL_TIM_ConfigClockSource+0x136>
 800203c:	2b40      	cmp	r3, #64	; 0x40
 800203e:	d86f      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002040:	2b30      	cmp	r3, #48	; 0x30
 8002042:	d064      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x156>
 8002044:	2b30      	cmp	r3, #48	; 0x30
 8002046:	d86b      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002048:	2b20      	cmp	r3, #32
 800204a:	d060      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x156>
 800204c:	2b20      	cmp	r3, #32
 800204e:	d867      	bhi.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05c      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x156>
 8002054:	2b10      	cmp	r3, #16
 8002056:	d05a      	beq.n	800210e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002058:	e062      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6818      	ldr	r0, [r3, #0]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	6899      	ldr	r1, [r3, #8]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	f000 fb06 	bl	800267a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800207c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	609a      	str	r2, [r3, #8]
      break;
 8002086:	e04e      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f000 faef 	bl	800267a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020aa:	609a      	str	r2, [r3, #8]
      break;
 80020ac:	e03b      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6818      	ldr	r0, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	6859      	ldr	r1, [r3, #4]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	461a      	mov	r2, r3
 80020bc:	f000 fa66 	bl	800258c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2150      	movs	r1, #80	; 0x50
 80020c6:	4618      	mov	r0, r3
 80020c8:	f000 fabd 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80020cc:	e02b      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6818      	ldr	r0, [r3, #0]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	461a      	mov	r2, r3
 80020dc:	f000 fa84 	bl	80025e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2160      	movs	r1, #96	; 0x60
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 faad 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 80020ec:	e01b      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	6859      	ldr	r1, [r3, #4]
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	461a      	mov	r2, r3
 80020fc:	f000 fa46 	bl	800258c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2140      	movs	r1, #64	; 0x40
 8002106:	4618      	mov	r0, r3
 8002108:	f000 fa9d 	bl	8002646 <TIM_ITRx_SetConfig>
      break;
 800210c:	e00b      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4619      	mov	r1, r3
 8002118:	4610      	mov	r0, r2
 800211a:	f000 fa94 	bl	8002646 <TIM_ITRx_SetConfig>
        break;
 800211e:	e002      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002120:	bf00      	nop
 8002122:	e000      	b.n	8002126 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a33      	ldr	r2, [pc, #204]	; (8002220 <TIM_Base_SetConfig+0xe0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d013      	beq.n	8002180 <TIM_Base_SetConfig+0x40>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a32      	ldr	r2, [pc, #200]	; (8002224 <TIM_Base_SetConfig+0xe4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00f      	beq.n	8002180 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d00b      	beq.n	8002180 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a2f      	ldr	r2, [pc, #188]	; (8002228 <TIM_Base_SetConfig+0xe8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a2e      	ldr	r2, [pc, #184]	; (800222c <TIM_Base_SetConfig+0xec>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d003      	beq.n	8002180 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a2d      	ldr	r2, [pc, #180]	; (8002230 <TIM_Base_SetConfig+0xf0>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d108      	bne.n	8002192 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a22      	ldr	r2, [pc, #136]	; (8002220 <TIM_Base_SetConfig+0xe0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <TIM_Base_SetConfig+0x82>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a21      	ldr	r2, [pc, #132]	; (8002224 <TIM_Base_SetConfig+0xe4>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00f      	beq.n	80021c2 <TIM_Base_SetConfig+0x82>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d00b      	beq.n	80021c2 <TIM_Base_SetConfig+0x82>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a1e      	ldr	r2, [pc, #120]	; (8002228 <TIM_Base_SetConfig+0xe8>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d007      	beq.n	80021c2 <TIM_Base_SetConfig+0x82>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a1d      	ldr	r2, [pc, #116]	; (800222c <TIM_Base_SetConfig+0xec>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d003      	beq.n	80021c2 <TIM_Base_SetConfig+0x82>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a1c      	ldr	r2, [pc, #112]	; (8002230 <TIM_Base_SetConfig+0xf0>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d108      	bne.n	80021d4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	4313      	orrs	r3, r2
 80021e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <TIM_Base_SetConfig+0xe0>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d003      	beq.n	8002208 <TIM_Base_SetConfig+0xc8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a08      	ldr	r2, [pc, #32]	; (8002224 <TIM_Base_SetConfig+0xe4>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d103      	bne.n	8002210 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	615a      	str	r2, [r3, #20]
}
 8002216:	bf00      	nop
 8002218:	3714      	adds	r7, #20
 800221a:	46bd      	mov	sp, r7
 800221c:	bc80      	pop	{r7}
 800221e:	4770      	bx	lr
 8002220:	40012c00 	.word	0x40012c00
 8002224:	40013400 	.word	0x40013400
 8002228:	40000400 	.word	0x40000400
 800222c:	40000800 	.word	0x40000800
 8002230:	40000c00 	.word	0x40000c00

08002234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002234:	b480      	push	{r7}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	f023 0201 	bic.w	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f023 0303 	bic.w	r3, r3, #3
 800226a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f023 0302 	bic.w	r3, r3, #2
 800227c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a20      	ldr	r2, [pc, #128]	; (800230c <TIM_OC1_SetConfig+0xd8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_OC1_SetConfig+0x64>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <TIM_OC1_SetConfig+0xdc>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d10c      	bne.n	80022b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f023 0308 	bic.w	r3, r3, #8
 800229e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	f023 0304 	bic.w	r3, r3, #4
 80022b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a15      	ldr	r2, [pc, #84]	; (800230c <TIM_OC1_SetConfig+0xd8>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d003      	beq.n	80022c2 <TIM_OC1_SetConfig+0x8e>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a14      	ldr	r2, [pc, #80]	; (8002310 <TIM_OC1_SetConfig+0xdc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d111      	bne.n	80022e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80022d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	621a      	str	r2, [r3, #32]
}
 8002300:	bf00      	nop
 8002302:	371c      	adds	r7, #28
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40012c00 	.word	0x40012c00
 8002310:	40013400 	.word	0x40013400

08002314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	f023 0210 	bic.w	r2, r3, #16
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	699b      	ldr	r3, [r3, #24]
 800233a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	021b      	lsls	r3, r3, #8
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	4313      	orrs	r3, r2
 8002356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f023 0320 	bic.w	r3, r3, #32
 800235e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	4a21      	ldr	r2, [pc, #132]	; (80023f4 <TIM_OC2_SetConfig+0xe0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d003      	beq.n	800237c <TIM_OC2_SetConfig+0x68>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	4a20      	ldr	r2, [pc, #128]	; (80023f8 <TIM_OC2_SetConfig+0xe4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d10d      	bne.n	8002398 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	4313      	orrs	r3, r2
 800238e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002396:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a16      	ldr	r2, [pc, #88]	; (80023f4 <TIM_OC2_SetConfig+0xe0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d003      	beq.n	80023a8 <TIM_OC2_SetConfig+0x94>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a15      	ldr	r2, [pc, #84]	; (80023f8 <TIM_OC2_SetConfig+0xe4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d113      	bne.n	80023d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	699b      	ldr	r3, [r3, #24]
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	621a      	str	r2, [r3, #32]
}
 80023ea:	bf00      	nop
 80023ec:	371c      	adds	r7, #28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bc80      	pop	{r7}
 80023f2:	4770      	bx	lr
 80023f4:	40012c00 	.word	0x40012c00
 80023f8:	40013400 	.word	0x40013400

080023fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b087      	sub	sp, #28
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	021b      	lsls	r3, r3, #8
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	4313      	orrs	r3, r2
 8002450:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a21      	ldr	r2, [pc, #132]	; (80024dc <TIM_OC3_SetConfig+0xe0>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d003      	beq.n	8002462 <TIM_OC3_SetConfig+0x66>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a20      	ldr	r2, [pc, #128]	; (80024e0 <TIM_OC3_SetConfig+0xe4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d10d      	bne.n	800247e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002468:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800247c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a16      	ldr	r2, [pc, #88]	; (80024dc <TIM_OC3_SetConfig+0xe0>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <TIM_OC3_SetConfig+0x92>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <TIM_OC3_SetConfig+0xe4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d113      	bne.n	80024b6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800249c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	011b      	lsls	r3, r3, #4
 80024b0:	693a      	ldr	r2, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	697a      	ldr	r2, [r7, #20]
 80024ce:	621a      	str	r2, [r3, #32]
}
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40012c00 	.word	0x40012c00
 80024e0:	40013400 	.word	0x40013400

080024e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a1b      	ldr	r3, [r3, #32]
 80024f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800251a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	4313      	orrs	r3, r2
 8002526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800252e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	031b      	lsls	r3, r3, #12
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <TIM_OC4_SetConfig+0xa0>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_OC4_SetConfig+0x68>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a10      	ldr	r2, [pc, #64]	; (8002588 <TIM_OC4_SetConfig+0xa4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d109      	bne.n	8002560 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	695b      	ldr	r3, [r3, #20]
 8002558:	019b      	lsls	r3, r3, #6
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	4313      	orrs	r3, r2
 800255e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	621a      	str	r2, [r3, #32]
}
 800257a:	bf00      	nop
 800257c:	371c      	adds	r7, #28
 800257e:	46bd      	mov	sp, r7
 8002580:	bc80      	pop	{r7}
 8002582:	4770      	bx	lr
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40013400 	.word	0x40013400

0800258c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800258c:	b480      	push	{r7}
 800258e:	b087      	sub	sp, #28
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f023 0201 	bic.w	r2, r3, #1
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	699b      	ldr	r3, [r3, #24]
 80025ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f023 030a 	bic.w	r3, r3, #10
 80025c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	621a      	str	r2, [r3, #32]
}
 80025de:	bf00      	nop
 80025e0:	371c      	adds	r7, #28
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bc80      	pop	{r7}
 80025e6:	4770      	bx	lr

080025e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b087      	sub	sp, #28
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	f023 0210 	bic.w	r2, r3, #16
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	699b      	ldr	r3, [r3, #24]
 8002604:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002612:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	031b      	lsls	r3, r3, #12
 8002618:	697a      	ldr	r2, [r7, #20]
 800261a:	4313      	orrs	r3, r2
 800261c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002624:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	693a      	ldr	r2, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	bf00      	nop
 800263e:	371c      	adds	r7, #28
 8002640:	46bd      	mov	sp, r7
 8002642:	bc80      	pop	{r7}
 8002644:	4770      	bx	lr

08002646 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
 800264e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800265c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	f043 0307 	orr.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	609a      	str	r2, [r3, #8]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr

0800267a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800267a:	b480      	push	{r7}
 800267c:	b087      	sub	sp, #28
 800267e:	af00      	add	r7, sp, #0
 8002680:	60f8      	str	r0, [r7, #12]
 8002682:	60b9      	str	r1, [r7, #8]
 8002684:	607a      	str	r2, [r7, #4]
 8002686:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002694:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	021a      	lsls	r2, r3, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	431a      	orrs	r2, r3
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	609a      	str	r2, [r3, #8]
}
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr

080026b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2201      	movs	r2, #1
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6a1a      	ldr	r2, [r3, #32]
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6a1a      	ldr	r2, [r3, #32]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	621a      	str	r2, [r3, #32]
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bc80      	pop	{r7}
 80026fe:	4770      	bx	lr

08002700 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002714:	2302      	movs	r3, #2
 8002716:	e050      	b.n	80027ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2202      	movs	r2, #2
 8002724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1b      	ldr	r2, [pc, #108]	; (80027c4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d018      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d013      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800276e:	d00e      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a15      	ldr	r2, [pc, #84]	; (80027cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d009      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a14      	ldr	r2, [pc, #80]	; (80027d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d004      	beq.n	800278e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a12      	ldr	r2, [pc, #72]	; (80027d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d10c      	bne.n	80027a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002794:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	4313      	orrs	r3, r2
 800279e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3714      	adds	r7, #20
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40013400 	.word	0x40013400
 80027cc:	40000400 	.word	0x40000400
 80027d0:	40000800 	.word	0x40000800
 80027d4:	40000c00 	.word	0x40000c00

080027d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e03f      	b.n	800286a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7fe f86c 	bl	80008dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	; 0x24
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68da      	ldr	r2, [r3, #12]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800281a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 fb49 	bl	8002eb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691a      	ldr	r2, [r3, #16]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002830:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695a      	ldr	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002840:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68da      	ldr	r2, [r3, #12]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002850:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2220      	movs	r2, #32
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08a      	sub	sp, #40	; 0x28
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	695b      	ldr	r3, [r3, #20]
 8002892:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002898:	2300      	movs	r3, #0
 800289a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800289c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10d      	bne.n	80028c6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ac:	f003 0320 	and.w	r3, r3, #32
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_UART_IRQHandler+0x52>
 80028b4:	6a3b      	ldr	r3, [r7, #32]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fa4f 	bl	8002d62 <UART_Receive_IT>
      return;
 80028c4:	e17b      	b.n	8002bbe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80b1 	beq.w	8002a30 <HAL_UART_IRQHandler+0x1bc>
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <HAL_UART_IRQHandler+0x70>
 80028d8:	6a3b      	ldr	r3, [r7, #32]
 80028da:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 80a6 	beq.w	8002a30 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_UART_IRQHandler+0x90>
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_UART_IRQHandler+0xb0>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	f043 0202 	orr.w	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_UART_IRQHandler+0xd0>
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	f003 0301 	and.w	r3, r3, #1
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	f043 0204 	orr.w	r2, r3, #4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00f      	beq.n	800296e <HAL_UART_IRQHandler+0xfa>
 800294e:	6a3b      	ldr	r3, [r7, #32]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d104      	bne.n	8002962 <HAL_UART_IRQHandler+0xee>
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d005      	beq.n	800296e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f043 0208 	orr.w	r2, r3, #8
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002972:	2b00      	cmp	r3, #0
 8002974:	f000 811e 	beq.w	8002bb4 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	2b00      	cmp	r3, #0
 8002980:	d007      	beq.n	8002992 <HAL_UART_IRQHandler+0x11e>
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f003 0320 	and.w	r3, r3, #32
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f9e8 	bl	8002d62 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <HAL_UART_IRQHandler+0x146>
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d031      	beq.n	8002a1e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f92a 	bl	8002c14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d023      	beq.n	8002a16 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	695a      	ldr	r2, [r3, #20]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029dc:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d013      	beq.n	8002a0e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_UART_IRQHandler+0x350>)
 80029ec:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe f9f2 	bl	8000ddc <HAL_DMA_Abort_IT>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a08:	4610      	mov	r0, r2
 8002a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0c:	e00e      	b.n	8002a2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 f8ec 	bl	8002bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a14:	e00a      	b.n	8002a2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f000 f8e8 	bl	8002bec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a1c:	e006      	b.n	8002a2c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f8e4 	bl	8002bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002a2a:	e0c3      	b.n	8002bb4 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a2c:	bf00      	nop
    return;
 8002a2e:	e0c1      	b.n	8002bb4 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	f040 80a1 	bne.w	8002b7c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 809b 	beq.w	8002b7c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f003 0310 	and.w	r3, r3, #16
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8095 	beq.w	8002b7c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d04e      	beq.n	8002b14 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002a80:	8a3b      	ldrh	r3, [r7, #16]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8098 	beq.w	8002bb8 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002a8c:	8a3a      	ldrh	r2, [r7, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	f080 8092 	bcs.w	8002bb8 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	8a3a      	ldrh	r2, [r7, #16]
 8002a98:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b20      	cmp	r3, #32
 8002aa2:	d02b      	beq.n	8002afc <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68da      	ldr	r2, [r3, #12]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab2:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695a      	ldr	r2, [r3, #20]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	695a      	ldr	r2, [r3, #20]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ad2:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2220      	movs	r2, #32
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	68da      	ldr	r2, [r3, #12]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0210 	bic.w	r2, r2, #16
 8002af0:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fe f935 	bl	8000d66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f876 	bl	8002bfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b12:	e051      	b.n	8002bb8 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d047      	beq.n	8002bbc <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002b2c:	8a7b      	ldrh	r3, [r7, #18]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d044      	beq.n	8002bbc <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002b40:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	695a      	ldr	r2, [r3, #20]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f022 0201 	bic.w	r2, r2, #1
 8002b50:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0210 	bic.w	r2, r2, #16
 8002b6e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b70:	8a7b      	ldrh	r3, [r7, #18]
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f842 	bl	8002bfe <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002b7a:	e01f      	b.n	8002bbc <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_UART_IRQHandler+0x324>
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 f87f 	bl	8002c94 <UART_Transmit_IT>
    return;
 8002b96:	e012      	b.n	8002bbe <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d00d      	beq.n	8002bbe <HAL_UART_IRQHandler+0x34a>
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8c0 	bl	8002d32 <UART_EndTransmit_IT>
    return;
 8002bb2:	e004      	b.n	8002bbe <HAL_UART_IRQHandler+0x34a>
    return;
 8002bb4:	bf00      	nop
 8002bb6:	e002      	b.n	8002bbe <HAL_UART_IRQHandler+0x34a>
      return;
 8002bb8:	bf00      	nop
 8002bba:	e000      	b.n	8002bbe <HAL_UART_IRQHandler+0x34a>
      return;
 8002bbc:	bf00      	nop
  }
}
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	08002c6d 	.word	0x08002c6d

08002bc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b083      	sub	sp, #12
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
 8002c06:	460b      	mov	r3, r1
 8002c08:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bc80      	pop	{r7}
 8002c12:	4770      	bx	lr

08002c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002c2a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f022 0201 	bic.w	r2, r2, #1
 8002c3a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0210 	bic.w	r2, r2, #16
 8002c52:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2220      	movs	r2, #32
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff ffb0 	bl	8002bec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b21      	cmp	r3, #33	; 0x21
 8002ca6:	d13e      	bne.n	8002d26 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cb0:	d114      	bne.n	8002cdc <UART_Transmit_IT+0x48>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d110      	bne.n	8002cdc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cce:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	1c9a      	adds	r2, r3, #2
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	621a      	str	r2, [r3, #32]
 8002cda:	e008      	b.n	8002cee <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	1c59      	adds	r1, r3, #1
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6211      	str	r1, [r2, #32]
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	3b01      	subs	r3, #1
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68da      	ldr	r2, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d10:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d20:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	e000      	b.n	8002d28 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002d26:	2302      	movs	r3, #2
  }
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b082      	sub	sp, #8
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d48:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2220      	movs	r2, #32
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7ff ff38 	bl	8002bc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b086      	sub	sp, #24
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b22      	cmp	r3, #34	; 0x22
 8002d74:	f040 8099 	bne.w	8002eaa <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d80:	d117      	bne.n	8002db2 <UART_Receive_IT+0x50>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d113      	bne.n	8002db2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da0:	b29a      	uxth	r2, r3
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	1c9a      	adds	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	629a      	str	r2, [r3, #40]	; 0x28
 8002db0:	e026      	b.n	8002e00 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002db6:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d007      	beq.n	8002dd6 <UART_Receive_IT+0x74>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <UART_Receive_IT+0x82>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d106      	bne.n	8002de4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	701a      	strb	r2, [r3, #0]
 8002de2:	e008      	b.n	8002df6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b01      	subs	r3, #1
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4619      	mov	r1, r3
 8002e0e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d148      	bne.n	8002ea6 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0220 	bic.w	r2, r2, #32
 8002e22:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e32:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f022 0201 	bic.w	r2, r2, #1
 8002e42:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d123      	bne.n	8002e9c <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68da      	ldr	r2, [r3, #12]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f022 0210 	bic.w	r2, r2, #16
 8002e68:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d10a      	bne.n	8002e8e <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e92:	4619      	mov	r1, r3
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff feb2 	bl	8002bfe <HAL_UARTEx_RxEventCallback>
 8002e9a:	e002      	b.n	8002ea2 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f7ff fe9c 	bl	8002bda <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	e002      	b.n	8002eac <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	e000      	b.n	8002eac <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002eaa:	2302      	movs	r3, #2
  }
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002eee:	f023 030c 	bic.w	r3, r3, #12
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6812      	ldr	r2, [r2, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699a      	ldr	r2, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	430a      	orrs	r2, r1
 8002f10:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <UART_SetConfig+0x114>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d103      	bne.n	8002f24 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f1c:	f7fe fdfa 	bl	8001b14 <HAL_RCC_GetPCLK2Freq>
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	e002      	b.n	8002f2a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f24:	f7fe fde2 	bl	8001aec <HAL_RCC_GetPCLK1Freq>
 8002f28:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	009a      	lsls	r2, r3, #2
 8002f34:	441a      	add	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	4a22      	ldr	r2, [pc, #136]	; (8002fcc <UART_SetConfig+0x118>)
 8002f42:	fba2 2303 	umull	r2, r3, r2, r3
 8002f46:	095b      	lsrs	r3, r3, #5
 8002f48:	0119      	lsls	r1, r3, #4
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f60:	4b1a      	ldr	r3, [pc, #104]	; (8002fcc <UART_SetConfig+0x118>)
 8002f62:	fba3 0302 	umull	r0, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2064      	movs	r0, #100	; 0x64
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	; 0x32
 8002f74:	4a15      	ldr	r2, [pc, #84]	; (8002fcc <UART_SetConfig+0x118>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f80:	4419      	add	r1, r3
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	441a      	add	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <UART_SetConfig+0x118>)
 8002f9a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	fb00 f303 	mul.w	r3, r0, r3
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	3332      	adds	r3, #50	; 0x32
 8002fac:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <UART_SetConfig+0x118>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002fc0:	bf00      	nop
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40013800 	.word	0x40013800
 8002fcc:	51eb851f 	.word	0x51eb851f

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	2600      	movs	r6, #0
 8002fd4:	4d0c      	ldr	r5, [pc, #48]	; (8003008 <__libc_init_array+0x38>)
 8002fd6:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd8:	1b64      	subs	r4, r4, r5
 8002fda:	10a4      	asrs	r4, r4, #2
 8002fdc:	42a6      	cmp	r6, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	f000 f822 	bl	8003028 <_init>
 8002fe4:	2600      	movs	r6, #0
 8002fe6:	4d0a      	ldr	r5, [pc, #40]	; (8003010 <__libc_init_array+0x40>)
 8002fe8:	4c0a      	ldr	r4, [pc, #40]	; (8003014 <__libc_init_array+0x44>)
 8002fea:	1b64      	subs	r4, r4, r5
 8002fec:	10a4      	asrs	r4, r4, #2
 8002fee:	42a6      	cmp	r6, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ff8:	4798      	blx	r3
 8002ffa:	3601      	adds	r6, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003002:	4798      	blx	r3
 8003004:	3601      	adds	r6, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	08003068 	.word	0x08003068
 800300c:	08003068 	.word	0x08003068
 8003010:	08003068 	.word	0x08003068
 8003014:	0800306c 	.word	0x0800306c

08003018 <memset>:
 8003018:	4603      	mov	r3, r0
 800301a:	4402      	add	r2, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <_init>:
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800302a:	bf00      	nop
 800302c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800302e:	bc08      	pop	{r3}
 8003030:	469e      	mov	lr, r3
 8003032:	4770      	bx	lr

08003034 <_fini>:
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	bf00      	nop
 8003038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800303a:	bc08      	pop	{r3}
 800303c:	469e      	mov	lr, r3
 800303e:	4770      	bx	lr
